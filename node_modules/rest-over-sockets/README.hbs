# REST-over-sockets

REST API over (Web)sockets using an [Express](https://www.npmjs.com/package/express) style interface

- 100% native javascript
- Compatible with [Websockets](https://www.npmjs.com/package/ws) and [Sockhop](https://www.npmjs.com/package/sockhop)
- Supports parameter capture, automatic error handling, and response encoding 


## Why

You have an application whose only clients connect directly over TCP/IP
- or -  
your clients all support Websockets
- and -  
you don't see the point in programming multiple API endpoints - some REST over HTTP, some over Websockets.
## Details

##### Request

Incoming requests are simple native ```object```, presumably transmitted over the wire using JSON.  You can do this yourself, or you can use a library like [Sockhop](https://www.npmjs.com/package/sockhop "Sockhop on NPM"). 


| Parameter | Type   | Example           | Required | Notes                                                  |
|-----------|--------|-------------------|----------|--------------------------------------------------------|
| method    | string | "POST"            | Y        |                                                        |
| path      | string | "/photos/cat.jpg" | Y        |                                                        |
| params    | object | { id: 23}         | N        |  RESERVED - auto populated from URL capture parameters |
| {...}     | any    |                   | N        | User managed, passed to handler                        |

```json
{
	"method": "GET",
	"path": "/apple/3444"
}
```

##### Response
Outgoing data conform to [JSON API](https://jsonapi.org/) spec.  If your hanlder throws an exception, the error will automatically result in a HTTP style ```500``` response.  Routes that don't exist return a HTTP style ```404``` error.
```json
{
    "status": 200,
    "headers": {
        "Content-Type": "text/json"
    },
    "data": [
        {
            "type": "Apple",
            "id": "23",
            "attributes": {
                "flavor": "sweet"
            }
        }
    ]
}
```

## Examples
##### Server using Websockets
```javascript
const wss=new (require("ws")).Server({ port: 8080 });
const restos=new (require("rest-over-sockets"))();

// Set up a server
wss.on("connection", (ws)=>{

	ws.on("message", (message)=> {

		restos.receive(JSON.parse(message),(response)=>{

			ws.send(JSON.stringify(response));
		});
	});
});
 
// Add an Express-style route
restos.get("/widget/:id", (req, res)=>{

		res
    	.set('Content-Type', 'text/json')
        .status(200)
        .data("Apple", req.params.id, { flavor: "sweet" })
        .send();	
});
```
##### Client using Websockets
```javascript
const ws= new (require("ws"))("ws://localhost:8080/");

ws.on("open", ()=>{

	ws.send(JSON.stringify({

		method : 	"GET",
		path :		"/widget/23"

	}));
});

ws.on("message", (data)=>{

	console.log(data);  // {"status":200,"headers":{"Content-Type":"text/json"},"data":[{"type":"Apple","id":"23","attributes":{"flavor":"sweet"}}]}
	ws.close();
});
```
Of course, Websockets has it's limitations.  If you are able to use native sockets, use Sockhop since it will automatically handle remote callbacks to ensure the response is given to the request that called it.  It also handles JSON encoding and possible packetization / fragmentation across the wire.
##### Server using Websockets
```javascript
const server=new (require("sockhop").server)();
const restos=new (require("rest-over-sockets"))();

server.listen();
server.on("receive", (o, meta)=>restos.receive(o, meta.callback));

restos.get("/apple/:id", (req, res)=>{
		res
    	.set('Content-Type', 'text/json')
        .status(200)
        .data("Apple", req.params.id, { flavor: "sweet" })
        .send();	
});
```
##### Client using Websockets
```javascript
const client=new (require("sockhop").client)();

client.connect().then(()=>{

	client.send({
		method: "GET",
		path: "/apple/3444"
	},(response)=>{

		console.log(`Response: ${JSON.stringify(response)}`);
		client.disconnect();
	});
});
```

### Notes

Make sure your handlers (added by calling ```.get()```, ```.post()```, etc) run asynchronously.  Example:
```
// BAD!
restos.get("/some/path", (req, res)=>{
	
		NASTY_BLOCKING_TASK();

		/* ... */

		res.send();	
});


// GOOD
restos.get("/some/path", (req, res)=>{
	
		return new Promise((resolve)=>{

			NASTY_BLOCKING_TASK();

			/* ... */

			resolve();
		})
		.then(res.send);
});

```


### Documentation
{{>main}}

## TODO

## License
MIT
